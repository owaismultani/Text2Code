import openai
import json

class CodeGenerator:
    def __init__(self, api_key, model="gpt-3.5-turbo", temperature=0.5, max_tokens=150):
        """
        Initialize the code generator with necessary parameters.

        Parameters
        ----------
        api_key : str
            Your OpenAI API key.
        model : str, optional
            The model to use for code generation. Default is 'gpt-3.5-turbo'.
        temperature : float, optional
            Controls randomness in the output. Lower values mean less random outputs.
            Default is 0.5.
        max_tokens : int, optional
            The maximum number of tokens to generate in the output. Default is 150.

        """
        self.api_key = api_key
        self.model = model
        self.temperature = temperature
        self.max_tokens = max_tokens
        openai.api_key = self.api_key

    def generate_code(self, chat):
        """
        Generate code based on the given messages using OpenAI's API.

        Parameters
        ----------
        messages : list
            List of messages to generate code from.

        Returns
        -------
        str
            Generated code as a string.
        """
        messages = chat.messages.all()
        client = openai.Client(api_key=self.api_key)
        response = client.chat.completions.create(
            model=self.model,
            messages=self._create_messages(messages),
            functions=self.__get_text2code_func(),
            function_call = 'auto'
        )
        if response.choices[0].message.function_call is not None:
            json_response = json.loads(response.choices[0].message.function_call.arguments)
            message = json_response['message']
            code = json_response['code']
            suggested_language = json_response['language']
        else:
            content = response.choices[0].message.content
            args = content.split('```')
            if len(args) == 1:
                message = args[0]
                code = ''
                suggested_language = ''
            else:
                suggested_language, code = args[1].split('\n', 1)
                message = args[0] + args[2]

        return message, code, suggested_language

    def _create_messages(self, messages):
        """
        Create a list of messages in the format required by OpenAI's API.

        Parameters
        ----------
        messages : list
            List of messages to generate code from.

        Returns
        -------
        list
            List of messages in the required format.
        """
        messages = [
            {"role": "assistant", "content": message.text} if message.role == 'assistant' else {"role": "user", "content": message.text}
            for message in messages
        ]
        return messages
    
    def __get_text2code_func(self):
        """
        Get the json representation of the text2code function.
        """
        text2code_func = [
            {
                'name': 'convert_text_to_code',
                'description': 'Convert text to code from the messages',
                'parameters': {
                    'type': 'object',
                    'properties': {
                        'message': {
                            'type': 'string',
                            'description': 'The output message from the chatbot eg. "I have generated the code for you"'
                        },
                        'code': {
                            'type': 'string',
                            'description': 'The code generated by the chatbot. eg. "print(\'Hello, World!\')"'
                        },
                        'language': {
                            'type': 'string',
                            'description': 'The programming language used for the generated code. eg. "python"'
                        }
                    }
                },
                'required': ['message', 'code', 'language'],
            }
        ]
        return text2code_func